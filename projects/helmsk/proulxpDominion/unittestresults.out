Testing isGameOver
All tests passed!
Testing numHandCards
All tests passed!
Testing supplyCount
All tests passed!
Testing updateCoins
All tests passed!
Testing Adventurer card
Assert failed: {G.handCount[0] == pre.handCount[0] + 2 - 1}, file cardtest1.c, line 50.
Assert failed: {G.hand[0][0] != adventurer}, file cardtest1.c, line 56.
Test failed: 2 failed assertions
Testing Gardens card
Assert failed: {returnValue == 0}, file cardtest2.c, line 43.
Assert failed: {G.handCount[0] == (pre.handCount[0] - 1)}, file cardtest2.c, line 46.
Assert failed: {G.hand[0][0] != gardens}, file cardtest2.c, line 52.
Test failed: 3 failed assertions
Testing Smithy card
Assert failed: {G.handCount[0] == (pre.handCount[0] + 3 - 1)}, file cardtest3.c, line 46.
Test failed: 1 failed assertions
Testing Village card
Assert failed: {G.numActions == (pre.numActions + 2 - 1)}, file cardtest4.c, line 49.
Test failed: 1 failed assertions
File 'dominion.c'
Lines executed:34.10% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://REFACTOR Section
        -:    9://The following 5 functions are the refactored card statements orginally found in the cardEffect() switch statements.
        1:   10:void adventurerRefactor(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   11:{
        -:   12:    int cardDrawn; //Assigned within refactored function
        -:   13:    
        -:   14:    //+3  Treasure Cards
        -:   15:    //*BUG INTRODUCED*
        6:   16:    while(drawntreasure<3){
        4:   17:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   18:            shuffle(currentPlayer, state);
        -:   19:        }
        4:   20:        drawCard(currentPlayer, state);
        4:   21:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:   22:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3:   23:            drawntreasure++;
        -:   24:        else{
        1:   25:            temphand[z]=cardDrawn;
        1:   26:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:   27:            z++;
        -:   28:        }
        -:   29:    }
        -:   30:    
        -:   31:
        3:   32:    while(z-1>=0){
        -:   33:        
        1:   34:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:   35:        z=z-1;
        -:   36:    }
        -:   37:
        1:   38:}
        -:   39:
        1:   40:void smithyRefactor(int currentPlayer, struct gameState *state, int i, int handPos)
        -:   41:{
        -:   42:    //+5 Cards
        -:   43:    //*BUG INTRODUCED*
        6:   44:    for (i = 0; i < 5; i++)
        -:   45:    {
        5:   46:        drawCard(currentPlayer, state);
        -:   47:    }
        -:   48:    
        -:   49:    //discard card from hand
        1:   50:    discardCard(handPos, currentPlayer, state, 0);
        1:   51:}
        -:   52:
    #####:   53:void feastRefactor(int currentPlayer, struct gameState *state, int i, int temphand[], int x, int choice1)
        -:   54:{
        -:   55:    //gain card with cost up to 5
        -:   56:    //Backup hand
    #####:   57:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:   58:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:   59:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:   60:    }
        -:   61:    //Backup hand
        -:   62:    
        -:   63:    //Update Coins for Buy
    #####:   64:    updateCoins(currentPlayer, state, 5);
    #####:   65:    x = 1;//Condition to loop on
    #####:   66:    while( x == 1) {//Buy one card
    #####:   67:        if (supplyCount(choice1, state) <= 0){
        -:   68:            if (DEBUG)
        -:   69:                printf("None of that card left, sorry!\n");
        -:   70:            
        -:   71:            if (DEBUG){
        -:   72:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   73:            }
        -:   74:        }
    #####:   75:        else if (state->coins < getCost(choice1)){
    #####:   76:            printf("That card is too expensive!\n");
        -:   77:            
        -:   78:            if (DEBUG){
        -:   79:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:   80:            }
        -:   81:        }
        -:   82:        else{
        -:   83:            
        -:   84:            if (DEBUG){
        -:   85:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   86:            }
        -:   87:            //*BUG INTRODUCED*
    #####:   88:            gainCard(0, state, 0, currentPlayer);//Gain the card
    #####:   89:            x = 0;//No more buying cards
        -:   90:            
        -:   91:            if (DEBUG){
        -:   92:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   93:            }
        -:   94:            
        -:   95:        }
        -:   96:    }     
        -:   97:    
        -:   98:    //Reset Hand
    #####:   99:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  100:        state->hand[currentPlayer][i] = temphand[i];
    #####:  101:        temphand[i] = -1;
        -:  102:    }
        -:  103:    //Reset Hand
    #####:  104:}
        -:  105:
        1:  106:void villageRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  107:{
        -:  108:    //+1 Card
        1:  109:    drawCard(currentPlayer, state);
        -:  110:    
        -:  111:    //-1 Actions
        -:  112:    //*BUG INTRODUCED*
        1:  113:    state->numActions = state->numActions - 1;
        -:  114:    
        -:  115:    //discard played card from hand
        1:  116:    discardCard(handPos, currentPlayer, state, 0);
        1:  117:}
        -:  118:
    #####:  119:void greatHallRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  120:{
        -:  121:    //+1 Card
    #####:  122:    drawCard(currentPlayer, state);
        -:  123:    
        -:  124:    //+1 Actions
    #####:  125:    state->numActions++;
        -:  126:    
        -:  127:    //discard card from hand
    #####:  128:    discardCard(handPos, currentPlayer, state, 0);
    #####:  129:}
        -:  130:
        -:  131://End of REFACTOR section
        -:  132:
      360:  133:int compare(const void* a, const void* b) {
      360:  134:  if (*(int*)a > *(int*)b)
    #####:  135:    return 1;
      360:  136:  if (*(int*)a < *(int*)b)
       96:  137:    return -1;
      264:  138:  return 0;
        -:  139:}
        -:  140:
    #####:  141:struct gameState* newGame() {
    #####:  142:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  143:  return g;
        -:  144:}
        -:  145:
    #####:  146:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  147:		  int k8, int k9, int k10) {
    #####:  148:  int* k = malloc(10 * sizeof(int));
    #####:  149:  k[0] = k1;
    #####:  150:  k[1] = k2;
    #####:  151:  k[2] = k3;
    #####:  152:  k[3] = k4;
    #####:  153:  k[4] = k5;
    #####:  154:  k[5] = k6;
    #####:  155:  k[6] = k7;
    #####:  156:  k[7] = k8;
    #####:  157:  k[8] = k9;
    #####:  158:  k[9] = k10;
    #####:  159:  return k;
        -:  160:}
        -:  161:
        8:  162:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  163:		   struct gameState *state) {
        -:  164:
        -:  165:  int i;
        -:  166:  int j;
        -:  167:  int it;			
        -:  168:  //set up random number generator
        8:  169:  SelectStream(1);
        8:  170:  PutSeed((long)randomSeed);
        -:  171:  
        -:  172:  //check number of players
        8:  173:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  174:    {
    #####:  175:      return -1;
        -:  176:    }
        -:  177:
        -:  178:  //set number of players
        8:  179:  state->numPlayers = numPlayers;
        -:  180:
        -:  181:  //check selected kingdom cards are different
       88:  182:  for (i = 0; i < 10; i++)
        -:  183:    {
      880:  184:      for (j = 0; j < 10; j++)
        -:  185:        {
      800:  186:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  187:	    {
    #####:  188:	      return -1;
        -:  189:	    }
        -:  190:        }
        -:  191:    }
        -:  192:
        -:  193:
        -:  194:  //initialize supply
        -:  195:  ///////////////////////////////
        -:  196:
        -:  197:  //set number of Curse cards
        8:  198:  if (numPlayers == 2)
        -:  199:    {
    #####:  200:      state->supplyCount[curse] = 10;
        -:  201:    }
        8:  202:  else if (numPlayers == 3)
        -:  203:    {
        8:  204:      state->supplyCount[curse] = 20;
        -:  205:    }
        -:  206:  else
        -:  207:    {
    #####:  208:      state->supplyCount[curse] = 30;
        -:  209:    }
        -:  210:
        -:  211:  //set number of Victory cards
        8:  212:  if (numPlayers == 2)
        -:  213:    {
    #####:  214:      state->supplyCount[estate] = 8;
    #####:  215:      state->supplyCount[duchy] = 8;
    #####:  216:      state->supplyCount[province] = 8;
        -:  217:    }
        -:  218:  else
        -:  219:    {
        8:  220:      state->supplyCount[estate] = 12;
        8:  221:      state->supplyCount[duchy] = 12;
        8:  222:      state->supplyCount[province] = 12;
        -:  223:    }
        -:  224:
        -:  225:  //set number of Treasure cards
        8:  226:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  227:  state->supplyCount[silver] = 40;
        8:  228:  state->supplyCount[gold] = 30;
        -:  229:
        -:  230:  //set number of Kingdom cards
      168:  231:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  232:    {
     1320:  233:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  234:	{
     1240:  235:	  if (kingdomCards[j] == i)
        -:  236:	    {
        -:  237:	      //check if card is a 'Victory' Kingdom card
       80:  238:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  239:		{
       16:  240:		  if (numPlayers == 2){ 
    #####:  241:		    state->supplyCount[i] = 8; 
        -:  242:		  }
        8:  243:		  else{ state->supplyCount[i] = 12; }
        -:  244:		}
        -:  245:	      else
        -:  246:		{
       72:  247:		  state->supplyCount[i] = 10;
        -:  248:		}
       80:  249:	      break;
        -:  250:	    }
        -:  251:	  else    //card is not in the set choosen for the game
        -:  252:	    {
     1160:  253:	      state->supplyCount[i] = -1;
        -:  254:	    }
        -:  255:	}
        -:  256:
        -:  257:    }
        -:  258:
        -:  259:  ////////////////////////
        -:  260:  //supply intilization complete
        -:  261:
        -:  262:  //set player decks
       32:  263:  for (i = 0; i < numPlayers; i++)
        -:  264:    {
       24:  265:      state->deckCount[i] = 0;
       96:  266:      for (j = 0; j < 3; j++)
        -:  267:	{
       72:  268:	  state->deck[i][j] = estate;
       72:  269:	  state->deckCount[i]++;
        -:  270:	}
      192:  271:      for (j = 3; j < 10; j++)
        -:  272:	{
      168:  273:	  state->deck[i][j] = copper;
      168:  274:	  state->deckCount[i]++;		
        -:  275:	}
        -:  276:    }
        -:  277:
        -:  278:  //shuffle player decks
       32:  279:  for (i = 0; i < numPlayers; i++)
        -:  280:    {
       24:  281:      if ( shuffle(i, state) < 0 )
        -:  282:	{
    #####:  283:	  return -1;
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //draw player hands
       32:  288:  for (i = 0; i < numPlayers; i++)
        -:  289:    {  
        -:  290:      //initialize hand size to zero
       24:  291:      state->handCount[i] = 0;
       24:  292:      state->discardCount[i] = 0;
        -:  293:      //draw 5 cards
        -:  294:      // for (j = 0; j < 5; j++)
        -:  295:      //	{
        -:  296:      //	  drawCard(i, state);
        -:  297:      //	}
        -:  298:    }
        -:  299:  
        -:  300:  //set embargo tokens to 0 for all supply piles
      224:  301:  for (i = 0; i <= treasure_map; i++)
        -:  302:    {
      216:  303:      state->embargoTokens[i] = 0;
        -:  304:    }
        -:  305:
        -:  306:  //initialize first player's turn
        8:  307:  state->outpostPlayed = 0;
        8:  308:  state->phase = 0;
        8:  309:  state->numActions = 1;
        8:  310:  state->numBuys = 1;
        8:  311:  state->playedCardCount = 0;
        8:  312:  state->whoseTurn = 0;
        8:  313:  state->handCount[state->whoseTurn] = 0;
        -:  314:  //int it; move to top
        -:  315:
        -:  316:  //Moved draw cards to here, only drawing at the start of a turn
       48:  317:  for (it = 0; it < 5; it++){
       40:  318:    drawCard(state->whoseTurn, state);
        -:  319:  }
        -:  320:
        8:  321:  updateCoins(state->whoseTurn, state, 0);
        -:  322:
        8:  323:  return 0;
        -:  324:}
        -:  325:
       24:  326:int shuffle(int player, struct gameState *state) {
        -:  327: 
        -:  328:
        -:  329:  int newDeck[MAX_DECK];
       24:  330:  int newDeckPos = 0;
        -:  331:  int card;
        -:  332:  int i;
        -:  333:
       24:  334:  if (state->deckCount[player] < 1)
    #####:  335:    return -1;
       24:  336:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  337:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  338:
      288:  339:  while (state->deckCount[player] > 0) {
      240:  340:    card = floor(Random() * state->deckCount[player]);
      240:  341:    newDeck[newDeckPos] = state->deck[player][card];
      240:  342:    newDeckPos++;
      680:  343:    for (i = card; i < state->deckCount[player]-1; i++) {
      440:  344:      state->deck[player][i] = state->deck[player][i+1];
        -:  345:    }
      240:  346:    state->deckCount[player]--;
        -:  347:  }
      264:  348:  for (i = 0; i < newDeckPos; i++) {
      240:  349:    state->deck[player][i] = newDeck[i];
      240:  350:    state->deckCount[player]++;
        -:  351:  }
        -:  352:
       24:  353:  return 0;
        -:  354:}
        -:  355:
        4:  356:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  357:{	
        -:  358:  int card;
        4:  359:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  360:
        -:  361:  //check if it is the right phase
        4:  362:  if (state->phase != 0)
        -:  363:    {
    #####:  364:      return -1;
        -:  365:    }
        -:  366:	
        -:  367:  //check if player has enough actions
        4:  368:  if ( state->numActions < 1 )
        -:  369:    {
    #####:  370:      return -1;
        -:  371:    }
        -:  372:	
        -:  373:  //get card played
        4:  374:  card = handCard(handPos, state);
        -:  375:	
        -:  376:  //check if selected card is an action
        4:  377:  if ( card < adventurer || card > treasure_map )
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //play card
        4:  383:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  384:    {
        1:  385:      return -1;
        -:  386:    }
        -:  387:	
        -:  388:  //reduce number of actions
        3:  389:  state->numActions--;
        -:  390:
        -:  391:  //update coins (Treasure cards may be added with card draws)
        3:  392:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  393:	
        3:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int buyCard(int supplyPos, struct gameState *state) {
        -:  398:  int who;
        -:  399:  if (DEBUG){
        -:  400:    printf("Entering buyCard...\n");
        -:  401:  }
        -:  402:
        -:  403:  // I don't know what to do about the phase thing.
        -:  404:
    #####:  405:  who = state->whoseTurn;
        -:  406:
    #####:  407:  if (state->numBuys < 1){
        -:  408:    if (DEBUG)
        -:  409:      printf("You do not have any buys left\n");
    #####:  410:    return -1;
    #####:  411:  } else if (supplyCount(supplyPos, state) <1){
        -:  412:    if (DEBUG)
        -:  413:      printf("There are not any of that type of card left\n");
    #####:  414:    return -1;
    #####:  415:  } else if (state->coins < getCost(supplyPos)){
        -:  416:    if (DEBUG) 
        -:  417:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  418:    return -1;
        -:  419:  } else {
    #####:  420:    state->phase=1;
        -:  421:    //state->supplyCount[supplyPos]--;
    #####:  422:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  423:  
    #####:  424:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  425:    state->numBuys--;
        -:  426:    if (DEBUG)
        -:  427:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  428:  }
        -:  429:
        -:  430:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  431:  //state->discardCount[who]++;
        -:  432:    
    #####:  433:  return 0;
        -:  434:}
        -:  435:
        6:  436:int numHandCards(struct gameState *state) {
        6:  437:  return state->handCount[ whoseTurn(state) ];
        -:  438:}
        -:  439:
        4:  440:int handCard(int handPos, struct gameState *state) {
        4:  441:  int currentPlayer = whoseTurn(state);
        4:  442:  return state->hand[currentPlayer][handPos];
        -:  443:}
        -:  444:
      123:  445:int supplyCount(int card, struct gameState *state) {
      123:  446:  return state->supplyCount[card];
        -:  447:}
        -:  448:
        3:  449:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  450:  int i;
        3:  451:  int count = 0;
        -:  452:
       18:  453:  for (i = 0; i < state->deckCount[player]; i++)
        -:  454:    {
       15:  455:      if (state->deck[player][i] == card) count++;
        -:  456:    }
        -:  457:
       18:  458:  for (i = 0; i < state->handCount[player]; i++)
        -:  459:    {
       15:  460:      if (state->hand[player][i] == card) count++;
        -:  461:    }
        -:  462:
        3:  463:  for (i = 0; i < state->discardCount[player]; i++)
        -:  464:    {
    #####:  465:      if (state->discard[player][i] == card) count++;
        -:  466:    }
        -:  467:
        3:  468:  return count;
        -:  469:}
        -:  470:
       14:  471:int whoseTurn(struct gameState *state) {
       14:  472:  return state->whoseTurn;
        -:  473:}
        -:  474:
    #####:  475:int endTurn(struct gameState *state) {
        -:  476:  int k;
        -:  477:  int i;
    #####:  478:  int currentPlayer = whoseTurn(state);
        -:  479:  
        -:  480:  //Discard hand
    #####:  481:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  482:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  483:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  484:  }
    #####:  485:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  486:    
        -:  487:  //Code for determining the player
    #####:  488:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  489:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  490:  }
        -:  491:  else{
    #####:  492:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  493:  }
        -:  494:
    #####:  495:  state->outpostPlayed = 0;
    #####:  496:  state->phase = 0;
    #####:  497:  state->numActions = 1;
    #####:  498:  state->coins = 0;
    #####:  499:  state->numBuys = 1;
    #####:  500:  state->playedCardCount = 0;
    #####:  501:  state->handCount[state->whoseTurn] = 0;
        -:  502:
        -:  503:  //int k; move to top
        -:  504:  //Next player draws hand
    #####:  505:  for (k = 0; k < 5; k++){
    #####:  506:    drawCard(state->whoseTurn, state);//Draw a card
        -:  507:  }
        -:  508:
        -:  509:  //Update money
    #####:  510:  updateCoins(state->whoseTurn, state , 0);
        -:  511:
    #####:  512:  return 0;
        -:  513:}
        -:  514:
        4:  515:int isGameOver(struct gameState *state) {
        -:  516:  int i;
        -:  517:  int j;
        -:  518:	
        -:  519:  //if stack of Province cards is empty, the game ends
        4:  520:  if (state->supplyCount[province] == 0)
        -:  521:    {
        1:  522:      return 1;
        -:  523:    }
        -:  524:
        -:  525:  //if three supply pile are at 0, the game ends
        3:  526:  j = 0;
       78:  527:  for (i = 0; i < 25; i++)
        -:  528:    {
       75:  529:      if (state->supplyCount[i] == 0)
        -:  530:	{
        3:  531:	  j++;
        -:  532:	}
        -:  533:    }
        3:  534:  if ( j >= 3)
        -:  535:    {
        1:  536:      return 1;
        -:  537:    }
        -:  538:
        2:  539:  return 0;
        -:  540:}
        -:  541:
        2:  542:int scoreFor (int player, struct gameState *state) {
        -:  543:
        -:  544:  int i;
        2:  545:  int score = 0;
        -:  546:  //score from hand
       12:  547:  for (i = 0; i < state->handCount[player]; i++)
        -:  548:    {
       10:  549:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  550:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  551:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  552:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  553:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  554:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  555:    }
        -:  556:
        -:  557:  //score from discard
        2:  558:  for (i = 0; i < state->discardCount[player]; i++)
        -:  559:    {
    #####:  560:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  561:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  562:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  563:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  564:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  565:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  566:    }
        -:  567:
        -:  568:  //score from deck
        2:  569:  for (i = 0; i < state->discardCount[player]; i++)
        -:  570:    {
    #####:  571:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  572:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  573:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  574:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  575:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  576:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  577:    }
        -:  578:
        2:  579:  return score;
        -:  580:}
        -:  581:
    #####:  582:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  583:  int i;	
        -:  584:  int j;
        -:  585:  int highScore;
        -:  586:  int currentPlayer;
        -:  587:
        -:  588:  //get score for each player
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:    {
        -:  591:      //set unused player scores to -9999
    #####:  592:      if (i >= state->numPlayers)
        -:  593:	{
    #####:  594:	  players[i] = -9999;
        -:  595:	}
        -:  596:      else
        -:  597:	{
    #####:  598:	  players[i] = scoreFor (i, state);
        -:  599:	}
        -:  600:    }
        -:  601:
        -:  602:  //find highest score
    #####:  603:  j = 0;
    #####:  604:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  605:    {
    #####:  606:      if (players[i] > players[j])
        -:  607:	{
    #####:  608:	  j = i;
        -:  609:	}
        -:  610:    }
    #####:  611:  highScore = players[j];
        -:  612:
        -:  613:  //add 1 to players who had less turns
    #####:  614:  currentPlayer = whoseTurn(state);
    #####:  615:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  616:    {
    #####:  617:      if ( players[i] == highScore && i > currentPlayer )
        -:  618:	{
    #####:  619:	  players[i]++;
        -:  620:	}
        -:  621:    }
        -:  622:
        -:  623:  //find new highest score
    #####:  624:  j = 0;
    #####:  625:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  626:    {
    #####:  627:      if ( players[i] > players[j] )
        -:  628:	{
    #####:  629:	  j = i;
        -:  630:	}
        -:  631:    }
    #####:  632:  highScore = players[j];
        -:  633:
        -:  634:  //set winners in array to 1 and rest to 0
    #####:  635:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  636:    {
    #####:  637:      if ( players[i] == highScore )
        -:  638:	{
    #####:  639:	  players[i] = 1;
        -:  640:	}
        -:  641:      else
        -:  642:	{
    #####:  643:	  players[i] = 0;
        -:  644:	}
        -:  645:    }
        -:  646:
    #####:  647:  return 0;
        -:  648:}
        -:  649:
       50:  650:int drawCard(int player, struct gameState *state)
        -:  651:{	int count;
        -:  652:  int deckCounter;
       50:  653:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  654:    
        -:  655:    //Step 1 Shuffle the discard pile back into a deck
        -:  656:    int i;
        -:  657:    //Move discard to deck
    #####:  658:    for (i = 0; i < state->discardCount[player];i++){
    #####:  659:      state->deck[player][i] = state->discard[player][i];
    #####:  660:      state->discard[player][i] = -1;
        -:  661:    }
        -:  662:
    #####:  663:    state->deckCount[player] = state->discardCount[player];
    #####:  664:    state->discardCount[player] = 0;//Reset discard
        -:  665:
        -:  666:    //Shufffle the deck
    #####:  667:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  668:   
        -:  669:    if (DEBUG){//Debug statements
        -:  670:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  671:    }
        -:  672:    
    #####:  673:    state->discardCount[player] = 0;
        -:  674:
        -:  675:    //Step 2 Draw Card
    #####:  676:    count = state->handCount[player];//Get current player's hand count
        -:  677:    
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Current hand count: %d\n", count);
        -:  680:    }
        -:  681:    
    #####:  682:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  683:
    #####:  684:    if (deckCounter == 0)
    #####:  685:      return -1;
        -:  686:
    #####:  687:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  688:    state->deckCount[player]--;
    #####:  689:    state->handCount[player]++;//Increment hand count
        -:  690:  }
        -:  691:
        -:  692:  else{
       50:  693:    int count = state->handCount[player];//Get current hand count for player
        -:  694:    int deckCounter;
        -:  695:    if (DEBUG){//Debug statements
        -:  696:      printf("Current hand count: %d\n", count);
        -:  697:    }
        -:  698:
       50:  699:    deckCounter = state->deckCount[player];//Create holder for the deck count
       50:  700:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       50:  701:    state->deckCount[player]--;
       50:  702:    state->handCount[player]++;//Increment hand count
        -:  703:  }
        -:  704:
       50:  705:  return 0;
        -:  706:}
        -:  707:
    #####:  708:int getCost(int cardNumber)
        -:  709:{
    #####:  710:  switch( cardNumber ) 
        -:  711:    {
        -:  712:    case curse:
    #####:  713:      return 0;
        -:  714:    case estate:
    #####:  715:      return 2;
        -:  716:    case duchy:
    #####:  717:      return 5;
        -:  718:    case province:
    #####:  719:      return 8;
        -:  720:    case copper:
    #####:  721:      return 0;
        -:  722:    case silver:
    #####:  723:      return 3;
        -:  724:    case gold:
    #####:  725:      return 6;
        -:  726:    case adventurer:
    #####:  727:      return 6;
        -:  728:    case council_room:
    #####:  729:      return 5;
        -:  730:    case feast:
    #####:  731:      return 4;
        -:  732:    case gardens:
    #####:  733:      return 4;
        -:  734:    case mine:
    #####:  735:      return 5;
        -:  736:    case remodel:
    #####:  737:      return 4;
        -:  738:    case smithy:
    #####:  739:      return 4;
        -:  740:    case village:
    #####:  741:      return 3;
        -:  742:    case baron:
    #####:  743:      return 4;
        -:  744:    case great_hall:
    #####:  745:      return 3;
        -:  746:    case minion:
    #####:  747:      return 5;
        -:  748:    case steward:
    #####:  749:      return 3;
        -:  750:    case tribute:
    #####:  751:      return 5;
        -:  752:    case ambassador:
    #####:  753:      return 3;
        -:  754:    case cutpurse:
    #####:  755:      return 4;
        -:  756:    case embargo: 
    #####:  757:      return 2;
        -:  758:    case outpost:
    #####:  759:      return 5;
        -:  760:    case salvager:
    #####:  761:      return 4;
        -:  762:    case sea_hag:
    #####:  763:      return 4;
        -:  764:    case treasure_map:
    #####:  765:      return 4;
        -:  766:    }
        -:  767:	
    #####:  768:  return -1;
        -:  769:}
        -:  770:
        4:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
        4:  778:  int currentPlayer = whoseTurn(state);
        4:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
        4:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
        4:  783:  int drawntreasure=0;
        -:  784:  //int cardDrawn;  //Silence Warning
        4:  785:  int z = 0;// this is the counter for the temp hand
        4:  786:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  787:    nextPlayer = 0;
        -:  788:  }
        -:  789:  
        -:  790:	
        -:  791:  //uses switch to select card and perform actions
        4:  792:  switch( card ) 
        -:  793:    {
        -:  794:    case adventurer:
        -:  795:    
        -:  796:    //Call to refactored function
        1:  797:    adventurerRefactor(drawntreasure, state, currentPlayer, temphand, z);
        -:  798:    
        1:  799:      return 0;
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    #####:  803:      for (i = 0; i < 4; i++)
        -:  804:	{
    #####:  805:	  drawCard(currentPlayer, state);
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
    #####:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
    #####:  812:      for (i = 0; i < state->numPlayers; i++)
        -:  813:	{
    #####:  814:	  if ( i != currentPlayer )
        -:  815:	    {
    #####:  816:	      drawCard(i, state);
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
    #####:  826:      i = 0; //Initialize for passing into refactored function
    #####:  827:      x = 1; //Initialize for passing into refactored function
        -:  828:    
        -:  829:     //Call to refactored function
    #####:  830:     feastRefactor(currentPlayer, state, i, temphand, x, choice1);
        -:  831:            
    #####:  832:      return 0;
        -:  833:			
        -:  834:    case gardens:
        1:  835:      return -1;
        -:  836:			
        -:  837:    case mine:
    #####:  838:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  839:
    #####:  840:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  841:	{
    #####:  842:	  return -1;
        -:  843:	}
        -:  844:		
    #####:  845:      if (choice2 > treasure_map || choice2 < curse)
        -:  846:	{
    #####:  847:	  return -1;
        -:  848:	}
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 2, currentPlayer);
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:			
    #####:  870:      return 0;
        -:  871:			
        -:  872:    case remodel:
    #####:  873:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      gainCard(choice2, state, 0, currentPlayer);
        -:  881:
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
        -:  884:
        -:  885:      //discard trashed card
    #####:  886:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  887:	{
    #####:  888:	  if (state->hand[currentPlayer][i] == j)
        -:  889:	    {
    #####:  890:	      discardCard(i, currentPlayer, state, 0);			
    #####:  891:	      break;
        -:  892:	    }
        -:  893:	}
        -:  894:
        -:  895:
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case smithy:
        -:  899:       
        1:  900:        i = 0; //Initialize variable for passing into refactoring function.
        -:  901:            
        -:  902:        //Call to refactored function
        1:  903:       smithyRefactor(currentPlayer, state, i, handPos);
        -:  904:            
        1:  905:      return 0;
        -:  906:		
        -:  907:    case village:
        -:  908:     
        -:  909:    //Call to refactored function
        1:  910:    villageRefactor(currentPlayer, state, handPos);
        -:  911:            
        1:  912:      return 0;
        -:  913:		
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
    #####:  940:		isGameOver(state);
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:			    
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:			    
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
    #####:  957:	    isGameOver(state);
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:	    
        -:  962:      
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case great_hall:
        -:  966:     
        -:  967:    //Call to refactored function
    #####:  968:    greatHallRefactor(currentPlayer, state, handPos);
        -:  969:            
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case minion:
        -:  973:      //+1 action
    #####:  974:      state->numActions++;
        -:  975:			
        -:  976:      //discard card from hand
    #####:  977:      discardCard(handPos, currentPlayer, state, 0);
        -:  978:			
    #####:  979:      if (choice1)		//+2 coins
        -:  980:	{
    #####:  981:	  state->coins = state->coins + 2;
        -:  982:	}
        -:  983:			
    #####:  984:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  985:	{
        -:  986:	  //discard hand
    #####:  987:	  while(numHandCards(state) > 0)
        -:  988:	    {
    #####:  989:	      discardCard(handPos, currentPlayer, state, 0);
        -:  990:	    }
        -:  991:				
        -:  992:	  //draw 4
    #####:  993:	  for (i = 0; i < 4; i++)
        -:  994:	    {
    #####:  995:	      drawCard(currentPlayer, state);
        -:  996:	    }
        -:  997:				
        -:  998:	  //other players discard hand and redraw if hand size > 4
    #####:  999:	  for (i = 0; i < state->numPlayers; i++)
        -: 1000:	    {
    #####: 1001:	      if (i != currentPlayer)
        -: 1002:		{
    #####: 1003:		  if ( state->handCount[i] > 4 )
        -: 1004:		    {
        -: 1005:		      //discard hand
    #####: 1006:		      while( state->handCount[i] > 0 )
        -: 1007:			{
    #####: 1008:			  discardCard(handPos, i, state, 0);
        -: 1009:			}
        -: 1010:							
        -: 1011:		      //draw 4
    #####: 1012:		      for (j = 0; j < 4; j++)
        -: 1013:			{
    #####: 1014:			  drawCard(i, state);
        -: 1015:			}
        -: 1016:		    }
        -: 1017:		}
        -: 1018:	    }
        -: 1019:				
        -: 1020:	}
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case steward:
    #####: 1024:      if (choice1 == 1)
        -: 1025:	{
        -: 1026:	  //+2 cards
    #####: 1027:	  drawCard(currentPlayer, state);
    #####: 1028:	  drawCard(currentPlayer, state);
        -: 1029:	}
    #####: 1030:      else if (choice1 == 2)
        -: 1031:	{
        -: 1032:	  //+2 coins
    #####: 1033:	  state->coins = state->coins + 2;
        -: 1034:	}
        -: 1035:      else
        -: 1036:	{
        -: 1037:	  //trash 2 cards in hand
    #####: 1038:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1039:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1040:	}
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
        -: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
        -: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
        2: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        2: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
        2: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        2: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        2: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        2: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        2: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        2: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        2: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        2: 1318:  return 0;
        -: 1319:}
        -: 1320:
    #####: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
    #####: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
    #####: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
    #####: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
    #####: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
    #####: 1355:  return 0;
        -: 1356:}
        -: 1357:
       16: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       16: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
      103: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
       87: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
       57: 1370:	  state->coins += 1;
        -: 1371:	}
       30: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
        5: 1374:	  state->coins += 2;
        -: 1375:	}
       25: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
       10: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       16: 1383:  state->coins += bonus;
        -: 1384:
       16: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389:
        -: 1390:
        -: 1391://end of dominion.c
        -: 1392:
File 'dominion.c'
Lines executed:34.10% of 566
Branches executed:37.65% of 417
Taken at least once:25.90% of 417
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://REFACTOR Section
        -:    9://The following 5 functions are the refactored card statements orginally found in the cardEffect() switch statements.
function adventurerRefactor called 1 returned 100% blocks executed 93%
        1:   10:void adventurerRefactor(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   11:{
        -:   12:    int cardDrawn; //Assigned within refactored function
        -:   13:    
        -:   14:    //+3  Treasure Cards
        -:   15:    //*BUG INTRODUCED*
        6:   16:    while(drawntreasure<3){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   17:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   18:            shuffle(currentPlayer, state);
call    0 never executed
        -:   19:        }
        4:   20:        drawCard(currentPlayer, state);
call    0 returned 100%
        4:   21:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:   22:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3:   23:            drawntreasure++;
        -:   24:        else{
        1:   25:            temphand[z]=cardDrawn;
        1:   26:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:   27:            z++;
        -:   28:        }
        -:   29:    }
        -:   30:    
        -:   31:
        3:   32:    while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   33:        
        1:   34:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:   35:        z=z-1;
        -:   36:    }
        -:   37:
        1:   38:}
        -:   39:
function smithyRefactor called 1 returned 100% blocks executed 100%
        1:   40:void smithyRefactor(int currentPlayer, struct gameState *state, int i, int handPos)
        -:   41:{
        -:   42:    //+5 Cards
        -:   43:    //*BUG INTRODUCED*
        6:   44:    for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   45:    {
        5:   46:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:   47:    }
        -:   48:    
        -:   49:    //discard card from hand
        1:   50:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:   51:}
        -:   52:
function feastRefactor called 0 returned 0% blocks executed 0%
    #####:   53:void feastRefactor(int currentPlayer, struct gameState *state, int i, int temphand[], int x, int choice1)
        -:   54:{
        -:   55:    //gain card with cost up to 5
        -:   56:    //Backup hand
    #####:   57:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:   58:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:   59:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:   60:    }
        -:   61:    //Backup hand
        -:   62:    
        -:   63:    //Update Coins for Buy
    #####:   64:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:   65:    x = 1;//Condition to loop on
    #####:   66:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:   67:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   68:            if (DEBUG)
        -:   69:                printf("None of that card left, sorry!\n");
        -:   70:            
        -:   71:            if (DEBUG){
        -:   72:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   73:            }
        -:   74:        }
    #####:   75:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:            printf("That card is too expensive!\n");
call    0 never executed
        -:   77:            
        -:   78:            if (DEBUG){
        -:   79:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:   80:            }
        -:   81:        }
        -:   82:        else{
        -:   83:            
        -:   84:            if (DEBUG){
        -:   85:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   86:            }
        -:   87:            //*BUG INTRODUCED*
    #####:   88:            gainCard(0, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:   89:            x = 0;//No more buying cards
        -:   90:            
        -:   91:            if (DEBUG){
        -:   92:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   93:            }
        -:   94:            
        -:   95:        }
        -:   96:    }     
        -:   97:    
        -:   98:    //Reset Hand
    #####:   99:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  100:        state->hand[currentPlayer][i] = temphand[i];
    #####:  101:        temphand[i] = -1;
        -:  102:    }
        -:  103:    //Reset Hand
    #####:  104:}
        -:  105:
function villageRefactor called 1 returned 100% blocks executed 100%
        1:  106:void villageRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  107:{
        -:  108:    //+1 Card
        1:  109:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  110:    
        -:  111:    //-1 Actions
        -:  112:    //*BUG INTRODUCED*
        1:  113:    state->numActions = state->numActions - 1;
        -:  114:    
        -:  115:    //discard played card from hand
        1:  116:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  117:}
        -:  118:
function greatHallRefactor called 0 returned 0% blocks executed 0%
    #####:  119:void greatHallRefactor(int currentPlayer, struct gameState *state, int handPos)
        -:  120:{
        -:  121:    //+1 Card
    #####:  122:    drawCard(currentPlayer, state);
call    0 never executed
        -:  123:    
        -:  124:    //+1 Actions
    #####:  125:    state->numActions++;
        -:  126:    
        -:  127:    //discard card from hand
    #####:  128:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  129:}
        -:  130:
        -:  131://End of REFACTOR section
        -:  132:
function compare called 360 returned 100% blocks executed 83%
      360:  133:int compare(const void* a, const void* b) {
      360:  134:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  135:    return 1;
      360:  136:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       96:  137:    return -1;
      264:  138:  return 0;
        -:  139:}
        -:  140:
function newGame called 0 returned 0% blocks executed 0%
    #####:  141:struct gameState* newGame() {
    #####:  142:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  143:  return g;
        -:  144:}
        -:  145:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  146:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  147:		  int k8, int k9, int k10) {
    #####:  148:  int* k = malloc(10 * sizeof(int));
    #####:  149:  k[0] = k1;
    #####:  150:  k[1] = k2;
    #####:  151:  k[2] = k3;
    #####:  152:  k[3] = k4;
    #####:  153:  k[4] = k5;
    #####:  154:  k[5] = k6;
    #####:  155:  k[6] = k7;
    #####:  156:  k[7] = k8;
    #####:  157:  k[8] = k9;
    #####:  158:  k[9] = k10;
    #####:  159:  return k;
        -:  160:}
        -:  161:
function initializeGame called 8 returned 100% blocks executed 89%
        8:  162:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  163:		   struct gameState *state) {
        -:  164:
        -:  165:  int i;
        -:  166:  int j;
        -:  167:  int it;			
        -:  168:  //set up random number generator
        8:  169:  SelectStream(1);
call    0 returned 100%
        8:  170:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  171:  
        -:  172:  //check number of players
        8:  173:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  174:    {
    #####:  175:      return -1;
        -:  176:    }
        -:  177:
        -:  178:  //set number of players
        8:  179:  state->numPlayers = numPlayers;
        -:  180:
        -:  181:  //check selected kingdom cards are different
       88:  182:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  183:    {
      880:  184:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  185:        {
      800:  186:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  187:	    {
    #####:  188:	      return -1;
        -:  189:	    }
        -:  190:        }
        -:  191:    }
        -:  192:
        -:  193:
        -:  194:  //initialize supply
        -:  195:  ///////////////////////////////
        -:  196:
        -:  197:  //set number of Curse cards
        8:  198:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  199:    {
    #####:  200:      state->supplyCount[curse] = 10;
        -:  201:    }
        8:  202:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  203:    {
        8:  204:      state->supplyCount[curse] = 20;
        -:  205:    }
        -:  206:  else
        -:  207:    {
    #####:  208:      state->supplyCount[curse] = 30;
        -:  209:    }
        -:  210:
        -:  211:  //set number of Victory cards
        8:  212:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  213:    {
    #####:  214:      state->supplyCount[estate] = 8;
    #####:  215:      state->supplyCount[duchy] = 8;
    #####:  216:      state->supplyCount[province] = 8;
        -:  217:    }
        -:  218:  else
        -:  219:    {
        8:  220:      state->supplyCount[estate] = 12;
        8:  221:      state->supplyCount[duchy] = 12;
        8:  222:      state->supplyCount[province] = 12;
        -:  223:    }
        -:  224:
        -:  225:  //set number of Treasure cards
        8:  226:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  227:  state->supplyCount[silver] = 40;
        8:  228:  state->supplyCount[gold] = 30;
        -:  229:
        -:  230:  //set number of Kingdom cards
      168:  231:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  232:    {
     1320:  233:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  234:	{
     1240:  235:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  236:	    {
        -:  237:	      //check if card is a 'Victory' Kingdom card
       80:  238:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  239:		{
       16:  240:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  241:		    state->supplyCount[i] = 8; 
        -:  242:		  }
        8:  243:		  else{ state->supplyCount[i] = 12; }
        -:  244:		}
        -:  245:	      else
        -:  246:		{
       72:  247:		  state->supplyCount[i] = 10;
        -:  248:		}
       80:  249:	      break;
        -:  250:	    }
        -:  251:	  else    //card is not in the set choosen for the game
        -:  252:	    {
     1160:  253:	      state->supplyCount[i] = -1;
        -:  254:	    }
        -:  255:	}
        -:  256:
        -:  257:    }
        -:  258:
        -:  259:  ////////////////////////
        -:  260:  //supply intilization complete
        -:  261:
        -:  262:  //set player decks
       32:  263:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  264:    {
       24:  265:      state->deckCount[i] = 0;
       96:  266:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  267:	{
       72:  268:	  state->deck[i][j] = estate;
       72:  269:	  state->deckCount[i]++;
        -:  270:	}
      192:  271:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  272:	{
      168:  273:	  state->deck[i][j] = copper;
      168:  274:	  state->deckCount[i]++;		
        -:  275:	}
        -:  276:    }
        -:  277:
        -:  278:  //shuffle player decks
       32:  279:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  280:    {
       24:  281:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  282:	{
    #####:  283:	  return -1;
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //draw player hands
       32:  288:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  289:    {  
        -:  290:      //initialize hand size to zero
       24:  291:      state->handCount[i] = 0;
       24:  292:      state->discardCount[i] = 0;
        -:  293:      //draw 5 cards
        -:  294:      // for (j = 0; j < 5; j++)
        -:  295:      //	{
        -:  296:      //	  drawCard(i, state);
        -:  297:      //	}
        -:  298:    }
        -:  299:  
        -:  300:  //set embargo tokens to 0 for all supply piles
      224:  301:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  302:    {
      216:  303:      state->embargoTokens[i] = 0;
        -:  304:    }
        -:  305:
        -:  306:  //initialize first player's turn
        8:  307:  state->outpostPlayed = 0;
        8:  308:  state->phase = 0;
        8:  309:  state->numActions = 1;
        8:  310:  state->numBuys = 1;
        8:  311:  state->playedCardCount = 0;
        8:  312:  state->whoseTurn = 0;
        8:  313:  state->handCount[state->whoseTurn] = 0;
        -:  314:  //int it; move to top
        -:  315:
        -:  316:  //Moved draw cards to here, only drawing at the start of a turn
       48:  317:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  318:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  319:  }
        -:  320:
        8:  321:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  322:
        8:  323:  return 0;
        -:  324:}
        -:  325:
function shuffle called 24 returned 100% blocks executed 94%
       24:  326:int shuffle(int player, struct gameState *state) {
        -:  327: 
        -:  328:
        -:  329:  int newDeck[MAX_DECK];
       24:  330:  int newDeckPos = 0;
        -:  331:  int card;
        -:  332:  int i;
        -:  333:
       24:  334:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  335:    return -1;
       24:  336:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  337:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  338:
      288:  339:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      240:  340:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      240:  341:    newDeck[newDeckPos] = state->deck[player][card];
      240:  342:    newDeckPos++;
      680:  343:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
      440:  344:      state->deck[player][i] = state->deck[player][i+1];
        -:  345:    }
      240:  346:    state->deckCount[player]--;
        -:  347:  }
      264:  348:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      240:  349:    state->deck[player][i] = newDeck[i];
      240:  350:    state->deckCount[player]++;
        -:  351:  }
        -:  352:
       24:  353:  return 0;
        -:  354:}
        -:  355:
function playCard called 4 returned 100% blocks executed 80%
        4:  356:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  357:{	
        -:  358:  int card;
        4:  359:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  360:
        -:  361:  //check if it is the right phase
        4:  362:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  363:    {
    #####:  364:      return -1;
        -:  365:    }
        -:  366:	
        -:  367:  //check if player has enough actions
        4:  368:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  369:    {
    #####:  370:      return -1;
        -:  371:    }
        -:  372:	
        -:  373:  //get card played
        4:  374:  card = handCard(handPos, state);
call    0 returned 100%
        -:  375:	
        -:  376:  //check if selected card is an action
        4:  377:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //play card
        4:  383:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -:  384:    {
        1:  385:      return -1;
        -:  386:    }
        -:  387:	
        -:  388:  //reduce number of actions
        3:  389:  state->numActions--;
        -:  390:
        -:  391:  //update coins (Treasure cards may be added with card draws)
        3:  392:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  393:	
        3:  394:  return 0;
        -:  395:}
        -:  396:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  397:int buyCard(int supplyPos, struct gameState *state) {
        -:  398:  int who;
        -:  399:  if (DEBUG){
        -:  400:    printf("Entering buyCard...\n");
        -:  401:  }
        -:  402:
        -:  403:  // I don't know what to do about the phase thing.
        -:  404:
    #####:  405:  who = state->whoseTurn;
        -:  406:
    #####:  407:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  408:    if (DEBUG)
        -:  409:      printf("You do not have any buys left\n");
    #####:  410:    return -1;
    #####:  411:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  412:    if (DEBUG)
        -:  413:      printf("There are not any of that type of card left\n");
    #####:  414:    return -1;
    #####:  415:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  416:    if (DEBUG) 
        -:  417:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  418:    return -1;
        -:  419:  } else {
    #####:  420:    state->phase=1;
        -:  421:    //state->supplyCount[supplyPos]--;
    #####:  422:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  423:  
    #####:  424:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  425:    state->numBuys--;
        -:  426:    if (DEBUG)
        -:  427:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  428:  }
        -:  429:
        -:  430:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  431:  //state->discardCount[who]++;
        -:  432:    
    #####:  433:  return 0;
        -:  434:}
        -:  435:
function numHandCards called 6 returned 100% blocks executed 100%
        6:  436:int numHandCards(struct gameState *state) {
        6:  437:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  438:}
        -:  439:
function handCard called 4 returned 100% blocks executed 100%
        4:  440:int handCard(int handPos, struct gameState *state) {
        4:  441:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  442:  return state->hand[currentPlayer][handPos];
        -:  443:}
        -:  444:
function supplyCount called 123 returned 100% blocks executed 100%
      123:  445:int supplyCount(int card, struct gameState *state) {
      123:  446:  return state->supplyCount[card];
        -:  447:}
        -:  448:
function fullDeckCount called 3 returned 100% blocks executed 71%
        3:  449:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  450:  int i;
        3:  451:  int count = 0;
        -:  452:
       18:  453:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  454:    {
       15:  455:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  456:    }
        -:  457:
       18:  458:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  459:    {
       15:  460:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  461:    }
        -:  462:
        3:  463:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  464:    {
    #####:  465:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  466:    }
        -:  467:
        3:  468:  return count;
        -:  469:}
        -:  470:
function whoseTurn called 14 returned 100% blocks executed 100%
       14:  471:int whoseTurn(struct gameState *state) {
       14:  472:  return state->whoseTurn;
        -:  473:}
        -:  474:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  475:int endTurn(struct gameState *state) {
        -:  476:  int k;
        -:  477:  int i;
    #####:  478:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  479:  
        -:  480:  //Discard hand
    #####:  481:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  482:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  483:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  484:  }
    #####:  485:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  486:    
        -:  487:  //Code for determining the player
    #####:  488:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  489:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  490:  }
        -:  491:  else{
    #####:  492:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  493:  }
        -:  494:
    #####:  495:  state->outpostPlayed = 0;
    #####:  496:  state->phase = 0;
    #####:  497:  state->numActions = 1;
    #####:  498:  state->coins = 0;
    #####:  499:  state->numBuys = 1;
    #####:  500:  state->playedCardCount = 0;
    #####:  501:  state->handCount[state->whoseTurn] = 0;
        -:  502:
        -:  503:  //int k; move to top
        -:  504:  //Next player draws hand
    #####:  505:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  506:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  507:  }
        -:  508:
        -:  509:  //Update money
    #####:  510:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  511:
    #####:  512:  return 0;
        -:  513:}
        -:  514:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  515:int isGameOver(struct gameState *state) {
        -:  516:  int i;
        -:  517:  int j;
        -:  518:	
        -:  519:  //if stack of Province cards is empty, the game ends
        4:  520:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  521:    {
        1:  522:      return 1;
        -:  523:    }
        -:  524:
        -:  525:  //if three supply pile are at 0, the game ends
        3:  526:  j = 0;
       78:  527:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  528:    {
       75:  529:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  530:	{
        3:  531:	  j++;
        -:  532:	}
        -:  533:    }
        3:  534:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  535:    {
        1:  536:      return 1;
        -:  537:    }
        -:  538:
        2:  539:  return 0;
        -:  540:}
        -:  541:
function scoreFor called 2 returned 100% blocks executed 36%
        2:  542:int scoreFor (int player, struct gameState *state) {
        -:  543:
        -:  544:  int i;
        2:  545:  int score = 0;
        -:  546:  //score from hand
       12:  547:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  548:    {
       10:  549:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  550:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       10:  551:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  552:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  553:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  554:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
        -:  555:    }
        -:  556:
        -:  557:  //score from discard
        2:  558:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  559:    {
    #####:  560:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  561:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  562:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  563:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  564:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  565:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  566:    }
        -:  567:
        -:  568:  //score from deck
        2:  569:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  570:    {
    #####:  571:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  572:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  573:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  574:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  575:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  576:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  577:    }
        -:  578:
        2:  579:  return score;
        -:  580:}
        -:  581:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  582:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  583:  int i;	
        -:  584:  int j;
        -:  585:  int highScore;
        -:  586:  int currentPlayer;
        -:  587:
        -:  588:  //get score for each player
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:    {
        -:  591:      //set unused player scores to -9999
    #####:  592:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  593:	{
    #####:  594:	  players[i] = -9999;
        -:  595:	}
        -:  596:      else
        -:  597:	{
    #####:  598:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  599:	}
        -:  600:    }
        -:  601:
        -:  602:  //find highest score
    #####:  603:  j = 0;
    #####:  604:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  605:    {
    #####:  606:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  607:	{
    #####:  608:	  j = i;
        -:  609:	}
        -:  610:    }
    #####:  611:  highScore = players[j];
        -:  612:
        -:  613:  //add 1 to players who had less turns
    #####:  614:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  615:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  616:    {
    #####:  617:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  618:	{
    #####:  619:	  players[i]++;
        -:  620:	}
        -:  621:    }
        -:  622:
        -:  623:  //find new highest score
    #####:  624:  j = 0;
    #####:  625:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  626:    {
    #####:  627:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  628:	{
    #####:  629:	  j = i;
        -:  630:	}
        -:  631:    }
    #####:  632:  highScore = players[j];
        -:  633:
        -:  634:  //set winners in array to 1 and rest to 0
    #####:  635:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  636:    {
    #####:  637:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  638:	{
    #####:  639:	  players[i] = 1;
        -:  640:	}
        -:  641:      else
        -:  642:	{
    #####:  643:	  players[i] = 0;
        -:  644:	}
        -:  645:    }
        -:  646:
    #####:  647:  return 0;
        -:  648:}
        -:  649:
function drawCard called 50 returned 100% blocks executed 38%
       50:  650:int drawCard(int player, struct gameState *state)
        -:  651:{	int count;
        -:  652:  int deckCounter;
       50:  653:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  654:    
        -:  655:    //Step 1 Shuffle the discard pile back into a deck
        -:  656:    int i;
        -:  657:    //Move discard to deck
    #####:  658:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  659:      state->deck[player][i] = state->discard[player][i];
    #####:  660:      state->discard[player][i] = -1;
        -:  661:    }
        -:  662:
    #####:  663:    state->deckCount[player] = state->discardCount[player];
    #####:  664:    state->discardCount[player] = 0;//Reset discard
        -:  665:
        -:  666:    //Shufffle the deck
    #####:  667:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  668:   
        -:  669:    if (DEBUG){//Debug statements
        -:  670:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  671:    }
        -:  672:    
    #####:  673:    state->discardCount[player] = 0;
        -:  674:
        -:  675:    //Step 2 Draw Card
    #####:  676:    count = state->handCount[player];//Get current player's hand count
        -:  677:    
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Current hand count: %d\n", count);
        -:  680:    }
        -:  681:    
    #####:  682:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  683:
    #####:  684:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  685:      return -1;
        -:  686:
    #####:  687:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  688:    state->deckCount[player]--;
    #####:  689:    state->handCount[player]++;//Increment hand count
        -:  690:  }
        -:  691:
        -:  692:  else{
       50:  693:    int count = state->handCount[player];//Get current hand count for player
        -:  694:    int deckCounter;
        -:  695:    if (DEBUG){//Debug statements
        -:  696:      printf("Current hand count: %d\n", count);
        -:  697:    }
        -:  698:
       50:  699:    deckCounter = state->deckCount[player];//Create holder for the deck count
       50:  700:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       50:  701:    state->deckCount[player]--;
       50:  702:    state->handCount[player]++;//Increment hand count
        -:  703:  }
        -:  704:
       50:  705:  return 0;
        -:  706:}
        -:  707:
function getCost called 0 returned 0% blocks executed 0%
    #####:  708:int getCost(int cardNumber)
        -:  709:{
    #####:  710:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  711:    {
        -:  712:    case curse:
    #####:  713:      return 0;
        -:  714:    case estate:
    #####:  715:      return 2;
        -:  716:    case duchy:
    #####:  717:      return 5;
        -:  718:    case province:
    #####:  719:      return 8;
        -:  720:    case copper:
    #####:  721:      return 0;
        -:  722:    case silver:
    #####:  723:      return 3;
        -:  724:    case gold:
    #####:  725:      return 6;
        -:  726:    case adventurer:
    #####:  727:      return 6;
        -:  728:    case council_room:
    #####:  729:      return 5;
        -:  730:    case feast:
    #####:  731:      return 4;
        -:  732:    case gardens:
    #####:  733:      return 4;
        -:  734:    case mine:
    #####:  735:      return 5;
        -:  736:    case remodel:
    #####:  737:      return 4;
        -:  738:    case smithy:
    #####:  739:      return 4;
        -:  740:    case village:
    #####:  741:      return 3;
        -:  742:    case baron:
    #####:  743:      return 4;
        -:  744:    case great_hall:
    #####:  745:      return 3;
        -:  746:    case minion:
    #####:  747:      return 5;
        -:  748:    case steward:
    #####:  749:      return 3;
        -:  750:    case tribute:
    #####:  751:      return 5;
        -:  752:    case ambassador:
    #####:  753:      return 3;
        -:  754:    case cutpurse:
    #####:  755:      return 4;
        -:  756:    case embargo: 
    #####:  757:      return 2;
        -:  758:    case outpost:
    #####:  759:      return 5;
        -:  760:    case salvager:
    #####:  761:      return 4;
        -:  762:    case sea_hag:
    #####:  763:      return 4;
        -:  764:    case treasure_map:
    #####:  765:      return 4;
        -:  766:    }
        -:  767:	
    #####:  768:  return -1;
        -:  769:}
        -:  770:
function cardEffect called 4 returned 100% blocks executed 5%
        4:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
        4:  778:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
        4:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
        4:  783:  int drawntreasure=0;
        -:  784:  //int cardDrawn;  //Silence Warning
        4:  785:  int z = 0;// this is the counter for the temp hand
        4:  786:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  787:    nextPlayer = 0;
        -:  788:  }
        -:  789:  
        -:  790:	
        -:  791:  //uses switch to select card and perform actions
        4:  792:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 25%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  793:    {
        -:  794:    case adventurer:
        -:  795:    
        -:  796:    //Call to refactored function
        1:  797:    adventurerRefactor(drawntreasure, state, currentPlayer, temphand, z);
call    0 returned 100%
        -:  798:    
        1:  799:      return 0;
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    #####:  803:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  804:	{
    #####:  805:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
    #####:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
    #####:  812:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  815:	    {
    #####:  816:	      drawCard(i, state);
call    0 never executed
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  822:			
    #####:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
    #####:  826:      i = 0; //Initialize for passing into refactored function
    #####:  827:      x = 1; //Initialize for passing into refactored function
        -:  828:    
        -:  829:     //Call to refactored function
    #####:  830:     feastRefactor(currentPlayer, state, i, temphand, x, choice1);
call    0 never executed
        -:  831:            
    #####:  832:      return 0;
        -:  833:			
        -:  834:    case gardens:
        1:  835:      return -1;
        -:  836:			
        -:  837:    case mine:
    #####:  838:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  839:
    #####:  840:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  841:	{
    #####:  842:	  return -1;
        -:  843:	}
        -:  844:		
    #####:  845:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  846:	{
    #####:  847:	  return -1;
        -:  848:	}
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:			
    #####:  870:      return 0;
        -:  871:			
        -:  872:    case remodel:
    #####:  873:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  881:
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  884:
        -:  885:      //discard trashed card
    #####:  886:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  891:	      break;
        -:  892:	    }
        -:  893:	}
        -:  894:
        -:  895:
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case smithy:
        -:  899:       
        1:  900:        i = 0; //Initialize variable for passing into refactoring function.
        -:  901:            
        -:  902:        //Call to refactored function
        1:  903:       smithyRefactor(currentPlayer, state, i, handPos);
call    0 returned 100%
        -:  904:            
        1:  905:      return 0;
        -:  906:		
        -:  907:    case village:
        -:  908:     
        -:  909:    //Call to refactored function
        1:  910:    villageRefactor(currentPlayer, state, handPos);
call    0 returned 100%
        -:  911:            
        1:  912:      return 0;
        -:  913:		
        -:  914:    case baron:
    #####:  915:      state->numBuys++;//Increase buys by 1!
    #####:  916:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  917:	int p = 0;//Iterator for hand!
    #####:  918:	int card_not_discarded = 1;//Flag for discard set!
    #####:  919:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  920:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  921:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  922:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  923:	    state->discardCount[currentPlayer]++;
    #####:  924:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  925:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  926:	    }
    #####:  927:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  928:	    state->handCount[currentPlayer]--;
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
    #####:  931:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  932:	    if(DEBUG) {
        -:  933:	      printf("No estate cards in your hand, invalid choice\n");
        -:  934:	      printf("Must gain an estate if there are any\n");
        -:  935:	    }
    #####:  936:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  938:	      state->supplyCount[estate]--;//Decrement estates
    #####:  939:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:		isGameOver(state);
call    0 never executed
        -:  941:	      }
        -:  942:	    }
    #####:  943:	    card_not_discarded = 0;//Exit the loop
        -:  944:	  }
        -:  945:			    
        -:  946:	  else{
    #####:  947:	    p++;//Next card
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:			    
        -:  952:      else{
    #####:  953:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  954:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  955:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  956:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	    isGameOver(state);
call    0 never executed
        -:  958:	  }
        -:  959:	}
        -:  960:      }
        -:  961:	    
        -:  962:      
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case great_hall:
        -:  966:     
        -:  967:    //Call to refactored function
    #####:  968:    greatHallRefactor(currentPlayer, state, handPos);
call    0 never executed
        -:  969:            
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case minion:
        -:  973:      //+1 action
    #####:  974:      state->numActions++;
        -:  975:			
        -:  976:      //discard card from hand
    #####:  977:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  978:			
    #####:  979:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  980:	{
    #####:  981:	  state->coins = state->coins + 2;
        -:  982:	}
        -:  983:			
    #####:  984:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  985:	{
        -:  986:	  //discard hand
    #####:  987:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  988:	    {
    #####:  989:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  990:	    }
        -:  991:				
        -:  992:	  //draw 4
    #####:  993:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  996:	    }
        -:  997:				
        -:  998:	  //other players discard hand and redraw if hand size > 4
    #####:  999:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1002:		{
    #####: 1003:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1004:		    {
        -: 1005:		      //discard hand
    #####: 1006:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1007:			{
    #####: 1008:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1009:			}
        -: 1010:							
        -: 1011:		      //draw 4
    #####: 1012:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  drawCard(i, state);
call    0 never executed
        -: 1015:			}
        -: 1016:		    }
        -: 1017:		}
        -: 1018:	    }
        -: 1019:				
        -: 1020:	}
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case steward:
    #####: 1024:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1025:	{
        -: 1026:	  //+2 cards
    #####: 1027:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1028:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1029:	}
    #####: 1030:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 coins
    #####: 1033:	  state->coins = state->coins + 2;
        -: 1034:	}
        -: 1035:      else
        -: 1036:	{
        -: 1037:	  //trash 2 cards in hand
    #####: 1038:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1039:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1040:	}
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
        -: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1096:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
        -: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1241:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
        2: 1287:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1288:    {
        -: 1289:      //add card to played pile
        2: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
        2: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
        2: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        2: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
        2: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
        2: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
        2: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
        2: 1318:  return 0;
        -: 1319:}
        -: 1320:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1326:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
    #####: 1336:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
    #####: 1341:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
    #####: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
    #####: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
    #####: 1355:  return 0;
        -: 1356:}
        -: 1357:
function updateCoins called 16 returned 100% blocks executed 100%
       16: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
       16: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
      103: 1366:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1367:    {
       87: 1368:      if (state->hand[player][i] == copper)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1369:	{
       57: 1370:	  state->coins += 1;
        -: 1371:	}
       30: 1372:      else if (state->hand[player][i] == silver)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1373:	{
        5: 1374:	  state->coins += 2;
        -: 1375:	}
       25: 1376:      else if (state->hand[player][i] == gold)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -: 1377:	{
       10: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
       16: 1383:  state->coins += bonus;
        -: 1384:
       16: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389:
        -: 1390:
        -: 1391://end of dominion.c
        -: 1392:
